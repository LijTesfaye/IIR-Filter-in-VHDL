library IEEE;
use IEEE.std_logic_1164.all;
use ieee.numeric_std.all;

--  Textio and std_logic_textio libraries standard library that provides 
--  all the procedures to read from or write to a file. 
--  It cannot be used in a synthesizable RTL VHDL but in this project 
--  it will serve us the stimulus of the Filter (Input and Output text files)

use STD.textio.all;
use ieee.std_logic_textio.all;

-------------------------------- Entity declaration-------------------------
entity IIR_Siren_tb is
end IIR_Siren_tb;
-----------------------------------------------------------------------------

architecture arch of IIR_Siren_tb is	-- This testbench put the siren wav file samples on test with the Matlab Reference

-- Component instantiation

component IIR    -- Calling the IIR FILTER 
	
	port (
		clk		:	in	std_logic;
		rst_l		:	in	std_logic;
		X		:	in	std_logic_vector(15 downto 0);	
		Y		:	out	std_logic_vector(15 downto 0)
	);
end component;

constant T_CLK 		: 	time := 22676 ns;  -- In digital audio, 44,100 Hz is a common sampling frequency.	

-------------------------------- TESTBENCH SIGNALS CONNECTIONS -------------------------

	signal clk		: 	std_logic	:= '0';  -- Signal serving clock Input 
	signal rst_l 		: 	std_logic;		 -- Asynchronous low reset
	signal X_tb		:	std_logic_vector(15 downto 0);	-- IIR filter Input (16 bits)
	signal Y_tb		:	std_logic_vector(15 downto 0);  -- IIR filter Output (16 bits)
	signal enable		:	std_logic	:=	'1';	-- Circuit enable
	signal expected	 	:	std_logic_vector(15 downto 0);  -- Handles the expected reference samples

-----------------------------------------------------------------------------------------

	file file_INPUT : text; -- Textio type that will be bound to the input of stimuli
 	file file_OUTPUT : text; -- Textio type that will be bound to the expected output of stimuli
 

begin
	
	Filter: IIR    -- IIR Filter Initiation
	port map(
		clk		=>	clk,
 		rst_l		=>	rst_l,
 		X		=>	X_tb,
		y		=>	Y_tb
        );
	
	
	clk <= not clk and enable after T_CLK / 2;   -- Clock generation
	
	
	TB:process   -- The testbench will be run through a process that handles input and output files

-------------------------------- Variables Declaration -------------------------
	variable v_ILINE     : line;  -- A textio type called line which collects the current 
					-- line of text in a file, this one is for the input.
	variable v_OLINE     : line;  -- Collects the line of the current output file.
	variable v_ADD_TERM1 : std_logic_vector(15 downto 0);  -- This variables handles recording the current line
	variable v_ADD_TERM2 : std_logic_vector(15 downto 0);  -- data into an std_logic_vector of 16 bits.
	variable i		: integer:=0; -- This is an integer keeping track of loop iterations.
-------------------------------- ------------------------------------------------
	
	
	begin
		
	--- These two functions takes the text files absolute path and a parametre to handle Read / Write mode
	--- which will be stored in file_INPUT/OUTPUT 
	--- The input has the original 16 bits samples to the filter 
	--- The output file has the filtered Matlab reference samples that we will use to compare with VHDL response

	file_open(file_INPUT, "C:\Users\KB\Desktop\iir-audio-filter-fpga-master\db\tb\siren_in.txt",  read_mode);
    	file_open(file_OUTPUT, "C:\Users\KB\Desktop\iir-audio-filter-fpga-master\db\tb\siren_out.txt", read_mode);
 
		rst_l <= '0';  -- Initial reset of the filter
		wait until clk'event and clk='1';  
		rst_l <= '1';   -- Realising the reset on the filter and starting the compraison
		
		------------------------------- LOOPING OVER SAMPLES -------------------------------

		-- This loop ends when it reaches the end file_Input or Output 
		-- It  compares the output of the filter to the expected samples
		while not endfile(file_INPUT) and not endfile(file_OUTPUT) loop 
			i:=i+1;  -- Iteration tracking
			readline(file_INPUT, v_ILINE); -- read current text file line
			read(v_ILINE, v_ADD_TERM1); -- Convert it into 16 bits vector
			readline(file_OUTPUT, v_OLINE);
			read(v_OLINE, v_ADD_TERM2);

			X_tb <= v_ADD_TERM1;  -- Forward the input sample to the filter
			expected <= v_ADD_TERM2; -- Forward the output to the expected 
			
			
			wait until clk'event and clk='1'; 
			assert (Y_tb = expected)  -- Comparing the expected to IIR ouput
			report "Inconsistency at line number : " & integer'image(i) -- If the compraison failes an error will be forwarded with line number of it 
			severity error;
			
		end loop;
		------------------------------- LOOPING OVER SAMPLES -------------------------------


	file_close(file_INPUT); -- Closing the text files after finishing
	file_close(file_OUTPUT);	 
		
		enable <= '0'; -- Ending the testbench by lowering the Enable
		end process;

end arch;